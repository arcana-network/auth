import { ConstructorParams, WalletPosition, Theme, Network } from './typings'
import { ArcanaAuthError } from './errors'

const fallbackLogo = {
  light:
    "data:image/svg+xml,%3Csvg fill='none' height='28' viewBox='0 0 31 28' width='31' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m1.34515 2.72906.891.454zm1.38353-1.38391.45399.891zm0 24.64295.45399-.891zm-1.38353-1.3837-.89101.454zm27.81005 0-.891-.454zm-1.3845 1.3837-.454-.891zm1.3845-23.25904-.891.454zm-1.3845-1.38391.454-.89101zm-27.529957 19.58745c-.359422.4193-.3108602 1.0506.108466 1.41.419326.3594 1.050621.3109 1.410051-.1084zm8.308557-8.1568-.75926-.6507zm3.8696.0269.7682-.6402zm4.2218 5.0662-.7682.6402zm3.7381.1695.7071.7071zm4.5567-.5781.7809-.6247zm3.7844 6.3312c.345.4313.9743.5012 1.4055.1562.4313-.345.5012-.9743.1562-1.4056zm-6.123-7.6922-.2772-.9608zm1.0429.0578.3817-.9243zm-5.7012 2.9691-.3687.9296zm1.0332.0468-.2831-.9591zm-9.01853-7.7124-.33415-.9425zm1.08013.0075.3473-.9378zm17.4666-5.40151v15.20001h2v-15.20001zm-4.0664 19.26671h-18.36662v2h18.36662zm-22.4336-4.0667v-15.20001h-2v15.20001zm4.06698-19.2666h18.36662v-2h-18.36662zm-4.06698 4.06659c0-.90325.00078-1.52052.03982-1.99837.03809-.46616.10756-.71093.19633-.88516l-1.78201-.90799c-.256369.50316-.359478 1.0404-.4076753 1.63028-.0472425.57819-.0464647 1.29099-.0464647 2.16124zm4.06698-6.06659c-.87026 0-1.58324-.00077714-2.1616.0464623-.58997.0481876-1.12747.1512737-1.63069.4076777l.90798 1.78201c.17417-.08874.41907-.15823.88552-.19633.47806-.03904 1.09554-.03982 1.99879-.03982zm-3.83083 3.18306c.20786-.40795.53909-.73931.94652-.94691l-.90798-1.78201c-.78427.399604-1.42121 1.03718-1.82055 1.82093zm3.83083 22.15024c-.90323 0-1.52071-.0008-1.99877-.0398-.46644-.0381-.71136-.1076-.88554-.1964l-.90798 1.782c.5032.2564 1.04069.3595 1.63067.4077.57837.0473 1.29134.0465 2.16162.0465zm-6.06698-4.0667c0 .8702-.00077757 1.5831.0464639 2.1614.0481939.5899.1512951 1.1272.4076761 1.6304l1.78201-.908c-.08876-.1742-.15823-.419-.19633-.8853-.03904-.4779-.03982-1.0953-.03982-1.9985zm3.18267 3.8305c-.40753-.2076-.73871-.5389-.94652-.9467l-1.78201.908c.399395.7838 1.03639 1.4212 1.82055 1.8207zm25.31733-3.8305c0 .9033-.0007 1.5207-.0397 1.9987-.038.4663-.1074.711-.1961.8851l1.782.908c.2564-.5033.3594-1.0408.4075-1.6306.0472-.5782.0463-1.2911.0463-2.1612zm-4.0664 6.0667c.8703 0 1.583.0008 2.1611-.0465.5898-.0482 1.1269-.1513 1.63-.4077l-.908-1.782c-.1743.0888-.419.1583-.885.1964-.4777.039-1.0948.0398-1.9981.0398zm3.8306-3.1829c-.2075.4072-.5393.7387-.9475.9467l.908 1.782c.7834-.3992 1.4218-1.0362 1.8215-1.8207zm2.2358-18.08381c0-.87015.0009-1.58296-.0463-2.16108-.0481-.58982-.1511-1.12717-.4075-1.63044l-1.782.90799c.0887.17412.1581.41878.1961.885.039.47792.0397 1.09518.0397 1.99853zm-6.0664-4.06659c.9033 0 1.5204.00078 1.9981.03982.466.03808.7107.10753.885.19633l.908-1.78201c-.5032-.256346-1.0402-.3594702-1.63-.4076737-.5781-.04724454-1.2908-.0464663-2.1611-.0464663zm5.6126.27507c-.3997-.78441-1.0379-1.421666-1.8215-1.82093l-.908 1.78201c.4081.20794.74.53963.9475.94691zm-28.28694 19.95913 7.54929-8.8076-1.51851-1.3015-7.549297 8.8075zm9.89134-8.7913 4.2219 5.0662 1.5364-1.2804-4.2218-5.0662zm9.4353 5.3026.7871-.787-1.4143-1.4142-.787.787zm3.0688-.6605 4.5652 5.7065 1.5617-1.2494-4.5652-5.7065zm-2.2817-.1265c.3586-.3586.5837-.5825.7657-.7359.1741-.1468.2329-.1618.2355-.1625l-.5545-1.9216c-.3895.1124-.6999.3271-.9701.5549-.2623.2212-.5568.5168-.8909.8509zm3.8434-1.1229c-.2953-.3691-.5554-.6954-.792-.9443-.2435-.2563-.5284-.5039-.9029-.6585l-.7634 1.8485c.0027.0012.0597.0227.2167.1879.164.1726.3632.42.6799.8158zm-2.8422.2245c.1268-.0366.2618-.0292.3839.0212l.7634-1.8485c-.5404-.2232-1.14-.2565-1.7018-.0943zm-7.0017 1.449c.2967.3561.5587.6719.7958.9123.2447.248.5298.4869.9016.6344l.7374-1.8591c-.0028-.0011-.0587-.0213-.2153-.18-.1642-.1664-.3639-.4049-.6831-.788zm3.7992-1.1778c-.3523.3524-.573.5719-.7516.7226-.1704.1439-.2282.1591-.2314.16l.5661 1.9182c.3834-.1131.6889-.325.9553-.5498.2582-.218.5478-.5088.8758-.8368zm-2.1018 2.7245c.537.213 1.1311.2398 1.6849.0763l-.5661-1.9182c-.1252.037-.2603.0308-.3814-.0172zm-8.26135-6.6292c.34723-.4051.5662-.6593.74545-.8353.1726-.1694.2328-.188.2334-.1882l-.66828-1.885c-.39752.1409-.70386.3885-.966.6458-.25541.2507-.53935.5835-.86308.9612zm3.87855-1.2641c-.3184-.3821-.5977-.7188-.8495-.9729-.2585-.2609-.5614-.5128-.9569-.6593l-.6945 1.8756c.0007.0002.0605.0196.2307.1914.1768.1784.3921.4357.7337.8456zm-2.8997.2406c.1287-.0456.2707-.0446.3988.0028l.6945-1.8756c-.5672-.2099-1.1915-.2144-1.76158-.0122zm9.7126-2.9031c-.3222 0-.5833-.26117-.5833-.58333h-2c0 1.42673 1.1566 2.58333 2.5833 2.58333zm.5833-.58333c0 .32216-.2611.58333-.5833.58333v2c1.4267 0 2.5833-1.1566 2.5833-2.58333zm-.5833-.58334c.3222 0 .5833.26117.5833.58334h2c0-1.42674-1.1566-2.58334-2.5833-2.58334zm0-2c-1.4267 0-2.5833 1.1566-2.5833 2.58334h2c0-.32217.2611-.58334.5833-.58334z' fill='%23101010'/%3E%3C/svg%3E",
  dark: "data:image/svg+xml,%3Csvg width='31' height='28' viewBox='0 0 31 28' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.34515 2.72906L2.23615 3.18306L1.34515 2.72906ZM2.72868 1.34515L3.18267 2.23615L2.72868 1.34515ZM2.72868 25.9881L3.18267 25.0971L3.18267 25.0971L2.72868 25.9881ZM1.34515 24.6044L0.45414 25.0584L0.45414 25.0584L1.34515 24.6044ZM29.1552 24.6044L28.2642 24.1504L29.1552 24.6044ZM27.7707 25.9881L27.3167 25.0971L27.7707 25.9881ZM29.1552 2.72906L28.2642 3.18306L28.2642 3.18306L29.1552 2.72906ZM27.7707 1.34515L28.2247 0.45414L28.2247 0.45414L27.7707 1.34515ZM0.240743 20.9326C-0.118679 21.3519 -0.0701172 21.9832 0.349209 22.3426C0.768535 22.702 1.39983 22.6535 1.75926 22.2342L0.240743 20.9326ZM8.5493 12.7758L7.79004 12.1251L7.79004 12.1251L8.5493 12.7758ZM12.4189 12.8027L13.1871 12.1625L13.1871 12.1625L12.4189 12.8027ZM16.6407 17.8689L15.8725 18.5091L15.8725 18.5091L16.6407 17.8689ZM20.3788 18.0384L21.0859 18.7455L21.0859 18.7455L20.3788 18.0384ZM24.9355 17.4603L25.7164 16.8356L25.7164 16.8356L24.9355 17.4603ZM28.7199 23.7915C29.0649 24.2228 29.6942 24.2927 30.1254 23.9477C30.5567 23.6027 30.6266 22.9734 30.2816 22.5421L28.7199 23.7915ZM22.5969 16.0993L22.3197 15.1385L22.3197 15.1385L22.5969 16.0993ZM23.6398 16.1571L24.0215 15.2328L23.6398 16.1571ZM17.9386 19.1262L17.5699 20.0558L17.5699 20.0558L17.9386 19.1262ZM18.9718 19.173L18.6887 18.2139L18.6887 18.2139L18.9718 19.173ZM9.95327 11.4606L9.61912 10.5181L9.61912 10.5181L9.95327 11.4606ZM11.0334 11.4681L11.3807 10.5303L11.3807 10.5303L11.0334 11.4681ZM28.5 6.06659V21.2666H30.5V6.06659H28.5ZM24.4336 25.3333H6.06698V27.3333H24.4336V25.3333ZM2 21.2666V6.06659H0V21.2666H2ZM6.06698 2H24.4336V0H6.06698V2ZM2 6.06659C2 5.16334 2.00078 4.54607 2.03982 4.06822C2.07791 3.60206 2.14738 3.35729 2.23615 3.18306L0.45414 2.27507C0.197771 2.77823 0.094662 3.31547 0.0464647 3.90535C-0.000777803 4.48354 0 5.19634 0 6.06659H2ZM6.06698 0C5.19672 0 4.48374 -0.000777136 3.90538 0.0464623C3.31541 0.0946499 2.77791 0.197736 2.27469 0.45414L3.18267 2.23615C3.35684 2.14741 3.60174 2.07792 4.06819 2.03982C4.54625 2.00078 5.16373 2 6.06698 2V0ZM2.23615 3.18306C2.44401 2.77511 2.77524 2.44375 3.18267 2.23615L2.27469 0.45414C1.49042 0.853744 0.85348 1.49132 0.45414 2.27507L2.23615 3.18306ZM6.06698 25.3333C5.16375 25.3333 4.54627 25.3325 4.06821 25.2935C3.60177 25.2554 3.35685 25.1859 3.18267 25.0971L2.27469 26.8791C2.77789 27.1355 3.31538 27.2386 3.90536 27.2868C4.48373 27.3341 5.1967 27.3333 6.06698 27.3333V25.3333ZM0 21.2666C0 22.1368 -0.000777574 22.8497 0.0464639 23.428C0.0946578 24.0179 0.197759 24.5552 0.45414 25.0584L2.23615 24.1504C2.14739 23.9762 2.07792 23.7314 2.03982 23.2651C2.00078 22.7872 2 22.1698 2 21.2666H0ZM3.18267 25.0971C2.77514 24.8895 2.44396 24.5582 2.23615 24.1504L0.45414 25.0584C0.853535 25.8422 1.49053 26.4796 2.27469 26.8791L3.18267 25.0971ZM28.5 21.2666C28.5 22.1699 28.4993 22.7873 28.4603 23.2653C28.4223 23.7316 28.3529 23.9763 28.2642 24.1504L30.0462 25.0584C30.3026 24.5551 30.4056 24.0176 30.4537 23.4278C30.5009 22.8496 30.5 22.1367 30.5 21.2666H28.5ZM24.4336 27.3333C25.3039 27.3333 26.0166 27.3341 26.5947 27.2868C27.1845 27.2386 27.7216 27.1355 28.2247 26.8791L27.3167 25.0971C27.1424 25.1859 26.8977 25.2554 26.4317 25.2935C25.954 25.3325 25.3369 25.3333 24.4336 25.3333V27.3333ZM28.2642 24.1504C28.0567 24.5576 27.7249 24.8891 27.3167 25.0971L28.2247 26.8791C29.0081 26.4799 29.6465 25.8429 30.0462 25.0584L28.2642 24.1504ZM30.5 6.06659C30.5 5.19644 30.5009 4.48363 30.4537 3.90551C30.4056 3.31569 30.3026 2.77834 30.0462 2.27507L28.2642 3.18306C28.3529 3.35718 28.4223 3.60184 28.4603 4.06806C28.4993 4.54598 28.5 5.16324 28.5 6.06659H30.5ZM24.4336 2C25.3369 2 25.954 2.00078 26.4317 2.03982C26.8977 2.0779 27.1424 2.14735 27.3167 2.23615L28.2247 0.45414C27.7215 0.197794 27.1845 0.0946698 26.5947 0.0464663C26.0166 -0.000778238 25.3039 0 24.4336 0V2ZM30.0462 2.27507C29.6465 1.49066 29.0083 0.853404 28.2247 0.45414L27.3167 2.23615C27.7248 2.44409 28.0567 2.77578 28.2642 3.18306L30.0462 2.27507ZM1.75926 22.2342L9.30855 13.4266L7.79004 12.1251L0.240743 20.9326L1.75926 22.2342ZM11.6506 13.4429L15.8725 18.5091L17.4089 17.2287L13.1871 12.1625L11.6506 13.4429ZM21.0859 18.7455L21.873 17.9585L20.4587 16.5443L19.6717 17.3313L21.0859 18.7455ZM24.1547 18.085L28.7199 23.7915L30.2816 22.5421L25.7164 16.8356L24.1547 18.085ZM21.873 17.9585C22.2316 17.5999 22.4567 17.376 22.6387 17.2226C22.8128 17.0758 22.8716 17.0608 22.8742 17.0601L22.3197 15.1385C21.9302 15.2509 21.6198 15.4656 21.3496 15.6934C21.0873 15.9146 20.7928 16.2102 20.4587 16.5443L21.873 17.9585ZM25.7164 16.8356C25.4211 16.4665 25.161 16.1402 24.9244 15.8913C24.6809 15.635 24.396 15.3874 24.0215 15.2328L23.2581 17.0813C23.2608 17.0825 23.3178 17.104 23.4748 17.2692C23.6388 17.4418 23.838 17.6892 24.1547 18.085L25.7164 16.8356ZM22.8742 17.0601C23.001 17.0235 23.136 17.0309 23.2581 17.0813L24.0215 15.2328C23.4811 15.0096 22.8815 14.9763 22.3197 15.1385L22.8742 17.0601ZM15.8725 18.5091C16.1692 18.8652 16.4312 19.181 16.6683 19.4214C16.913 19.6694 17.1981 19.9083 17.5699 20.0558L18.3073 18.1967C18.3045 18.1956 18.2486 18.1754 18.092 18.0167C17.9278 17.8503 17.7281 17.6118 17.4089 17.2287L15.8725 18.5091ZM19.6717 17.3313C19.3194 17.6837 19.0987 17.9032 18.9201 18.0539C18.7497 18.1978 18.6919 18.213 18.6887 18.2139L19.2548 20.1321C19.6382 20.019 19.9437 19.8071 20.2101 19.5823C20.4683 19.3643 20.7579 19.0735 21.0859 18.7455L19.6717 17.3313ZM17.5699 20.0558C18.1069 20.2688 18.701 20.2956 19.2548 20.1321L18.6887 18.2139C18.5635 18.2509 18.4284 18.2447 18.3073 18.1967L17.5699 20.0558ZM9.30855 13.4266C9.65578 13.0215 9.87475 12.7673 10.054 12.5913C10.2266 12.4219 10.2868 12.4033 10.2874 12.4031L9.61912 10.5181C9.2216 10.659 8.91526 10.9066 8.65312 11.1639C8.39771 11.4146 8.11377 11.7474 7.79004 12.1251L9.30855 13.4266ZM13.1871 12.1625C12.8687 11.7804 12.5894 11.4437 12.3376 11.1896C12.0791 10.9287 11.7762 10.6768 11.3807 10.5303L10.6862 12.4059C10.6869 12.4061 10.7467 12.4255 10.9169 12.5973C11.0937 12.7757 11.309 13.033 11.6506 13.4429L13.1871 12.1625ZM10.2874 12.4031C10.4161 12.3575 10.5581 12.3585 10.6862 12.4059L11.3807 10.5303C10.8135 10.3204 10.1892 10.3159 9.61912 10.5181L10.2874 12.4031ZM20 9.5C19.6778 9.5 19.4167 9.23883 19.4167 8.91667H17.4167C17.4167 10.3434 18.5733 11.5 20 11.5V9.5ZM20.5833 8.91667C20.5833 9.23883 20.3222 9.5 20 9.5V11.5C21.4267 11.5 22.5833 10.3434 22.5833 8.91667H20.5833ZM20 8.33333C20.3222 8.33333 20.5833 8.5945 20.5833 8.91667H22.5833C22.5833 7.48993 21.4267 6.33333 20 6.33333V8.33333ZM20 6.33333C18.5733 6.33333 17.4167 7.48993 17.4167 8.91667H19.4167C19.4167 8.5945 19.6778 8.33333 20 8.33333V6.33333Z' fill='%23F7F7F7'/%3E%3C/svg%3E%0A",
}

const getFallbackImage = (t: Theme) => {
  return fallbackLogo[t]
}

const ICONS = {
  success:
    "data:image/svg+xml,%3Csvg width='151' height='147' viewBox='0 0 151 147' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg opacity='0.419035'%3E%3Cpath d='M94.3585 4.39385C94.3585 6.8206 92.3736 8.78798 89.9253 8.78798C87.477 8.78798 85.4922 6.8206 85.4922 4.39385C85.4922 1.96723 87.477 0 89.9253 0C92.3736 0 94.3585 1.96723 94.3585 4.39385Z' fill='%233CA6FA'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M59.4441 15.3287L56.8114 16.8352C56.3347 17.108 55.7253 16.9461 55.4501 16.4737L50.6962 8.31243C50.421 7.84009 50.5844 7.23603 51.0609 6.96337L53.6938 5.45667C54.1703 5.184 54.7797 5.34582 55.055 5.81815L59.8088 13.9795C60.0841 14.452 59.9207 15.0559 59.4441 15.3287Z' fill='%233CA6FA'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M15.0339 32.3637L15.6261 32.5628C16.2975 32.7886 17.0381 32.6722 17.6065 32.2519L18.1077 31.8812C19.5388 30.8226 21.5735 31.8501 21.5507 33.6199L21.5427 34.2397C21.5336 34.9425 21.8739 35.6047 22.4528 36.0106L22.9635 36.3685C24.4215 37.3904 24.0642 39.6257 22.359 40.1512L21.7618 40.3352C21.0846 40.5438 20.5546 41.0694 20.3442 41.7405L20.1584 42.3325C19.6284 44.0226 17.3731 44.3766 16.342 42.9315L15.9807 42.4255C15.5713 41.8517 14.9032 41.5142 14.1942 41.5233L13.5688 41.5311C11.7833 41.5537 10.7467 39.5372 11.8147 38.1186L12.1888 37.6218C12.613 37.0586 12.7302 36.3245 12.5024 35.6589L12.3015 35.0719C11.7281 33.3957 13.3427 31.7954 15.0339 32.3637Z' fill='%233CA6FA'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M11.2466 63.5287L11.9116 66.4689C12.032 67.0012 11.6943 67.5295 11.1572 67.6487L1.87966 69.7101C1.34269 69.8293 0.809791 69.4946 0.689237 68.9623L0.0243071 66.0219C-0.0959554 65.4897 0.241739 64.9615 0.778708 64.8423L10.0564 62.7809C10.5933 62.6617 11.1262 62.9964 11.2466 63.5287Z' fill='%239DE000'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M20.6082 100.625C20.6082 103.052 18.6234 105.019 16.1752 105.019C13.7268 105.019 11.7422 103.052 11.7422 100.625C11.7422 98.1987 13.7268 96.2314 16.1752 96.2314C18.6234 96.2314 20.6082 98.1987 20.6082 100.625Z' fill='%23F23D3D'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M15.0339 122.725L15.6261 122.924C16.2975 123.15 17.0381 123.034 17.6065 122.613L18.1077 122.242C19.5388 121.184 21.5735 122.211 21.5507 123.981L21.5427 124.601C21.5336 125.304 21.8739 125.966 22.4528 126.372L22.9635 126.73C24.4215 127.752 24.0642 129.987 22.359 130.513L21.7618 130.697C21.0846 130.905 20.5546 131.431 20.3442 132.102L20.1584 132.694C19.6284 134.384 17.3731 134.738 16.342 133.293L15.9807 132.787C15.5713 132.213 14.9032 131.876 14.1942 131.885L13.5688 131.893C11.7833 131.915 10.7467 129.899 11.8147 128.48L12.1888 127.983C12.613 127.42 12.7302 126.686 12.5024 126.02L12.3015 125.433C11.7281 123.757 13.3427 122.157 15.0339 122.725Z' fill='%23FAEE3D'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M129.132 28.1704C127.789 26.435 128.205 23.8499 130.054 22.4436C131.903 21.0374 134.53 21.3082 135.873 23.0437C135.876 23.047 135.878 23.0503 135.881 23.0535' stroke='%23F23D3D' stroke-width='1.98137' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M140.862 52.2221L141.454 52.4212C142.126 52.647 142.866 52.5306 143.435 52.1103L143.936 51.7396C145.367 50.681 147.402 51.7085 147.379 53.4783L147.371 54.0981C147.362 54.8009 147.702 55.4631 148.281 55.869L148.792 56.2269C150.25 57.2488 149.893 59.4841 148.187 60.0096L147.59 60.1936C146.913 60.4022 146.383 60.9278 146.172 61.5989L145.986 62.1909C145.456 63.881 143.201 64.235 142.17 62.7899L141.809 62.2839C141.399 61.7101 140.732 61.3726 140.022 61.3817L139.397 61.3896C137.612 61.4121 136.575 59.3956 137.643 57.9771L138.017 57.4803C138.441 56.917 138.558 56.1829 138.33 55.5173L138.13 54.9303C137.556 53.2541 139.171 51.6538 140.862 52.2221Z' fill='%23FAEE3D'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M145.217 104.171C148.232 104.564 150.367 107.485 149.948 110.64C149.529 113.795 146.703 116.068 143.689 115.674C143.683 115.674 143.678 115.673 143.672 115.672' stroke='%23F23D3D' stroke-width='1.48603' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M135.718 141.235L133.085 142.742C132.608 143.014 131.999 142.852 131.724 142.38L126.97 134.219C126.694 133.746 126.858 133.142 127.334 132.87L129.967 131.363C130.444 131.09 131.053 131.252 131.328 131.724L136.082 139.886C136.357 140.358 136.194 140.962 135.718 141.235Z' fill='%233CA6FA'/%3E%3C/g%3E%3Cg opacity='0.796078'%3E%3Cpath d='M49.4302 146.001C47.5793 143.61 48.1523 140.048 50.6998 138.111C53.2472 136.174 56.8664 136.547 58.7173 138.938L58.7279 138.951' stroke='%233CA6FA' stroke-width='1.98137' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/g%3E%3Cpath d='M133.141 69.8273C133.141 98.8525 109.4 122.382 80.1137 122.382C50.8274 122.382 27.0859 98.8525 27.0859 69.8273C27.0859 40.802 50.8274 17.2725 80.1137 17.2725C109.4 17.2725 133.141 40.802 133.141 69.8273Z' fill='%239DE000'/%3E%3Cpath d='M56.6641 69.9175L72.2097 85.3247L103.481 54.332' stroke='white' stroke-width='5.7388' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A",
  fail: "data:image/svg+xml,%3Csvg width='116' height='116' viewBox='0 0 116 116' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M115.341 58.0094C115.341 89.6796 89.6673 115.354 57.9967 115.354C26.3265 115.354 0.652344 89.6796 0.652344 58.0094C0.652344 26.3392 26.3265 0.665039 57.9967 0.665039C89.6673 0.665039 115.341 26.3392 115.341 58.0094Z' fill='%23B43030'/%3E%3Cpath d='M78.7969 37.2041L37.1953 78.8057' stroke='white' stroke-width='5.74' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M78.7969 78.8057L37.1953 37.2041' stroke='white' stroke-width='5.74' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A",
}

type elements =
  | 'style'
  | 'src'
  | 'onclick'
  | 'id'
  | 'onerror'
  | 'allow'
  | 'className'

const createDomElement = (
  type: string,
  props: Partial<{ [key in elements]: object | string | (() => void) }>,
  ...children: (string | HTMLElement)[]
): HTMLElement => {
  const dom = document.createElement(type)
  if (props) {
    Object.assign(dom, props)
    if (props.style) Object.assign(dom.style, props.style)
  }
  for (const child of children) {
    if (typeof child != 'string') dom.appendChild(child)
    else dom.appendChild(document.createTextNode(child))
  }
  return dom
}

const setWalletPosition = (
  element: HTMLElement,
  position: WalletPosition
): void => {
  if (position.right) {
    element.style.right = position.right
  }
  if (position.left) {
    element.style.left = position.left
  }
  element.style.bottom = position.bottom
}

const getErrorReporter = (): ((m: string) => void) => {
  return (msg: string) => {
    console.error(msg)
  }
}

const constructLoginUrl = (params: {
  loginType: string
  email?: string
  sessionId?: string
  setToken?: string
  appId: string
  authUrl: string
  parentUrl: string
}) => {
  const url = new URL('/login/init', params.authUrl)
  const hash = encodeJSON(params)
  url.hash = hash
  return url.toString()
}

const redirectTo = (url: string) => {
  if (url) {
    setTimeout(() => (window.location.href = url), 50)
  }
  return
}

const isDefined = (arg: unknown) => arg !== undefined && arg !== null

const isValidString = (arg: unknown): arg is string =>
  typeof arg === 'string' && arg.trim().length > 0

const isAddressLike = (arg: string) => removeHexPrefix(arg).length === 40

const validateAppAddress = (arg: unknown) => {
  if (!isDefined(arg)) {
    throw new Error('appAddress is required')
  }
  if (!isValidString(arg)) {
    throw new Error('appAddress is required to be a non-empty string')
  }
  if (!isAddressLike(arg)) {
    throw new Error('appAddress is required to be an ethereum address')
  }
}

const CLIENT_ID_SEPERATOR = '_'
const isClientId = (id: string | undefined | null): boolean => {
  if (!isValidString(id)) {
    throw new ArcanaAuthError('invalid_client_id', 'Invalid Client ID')
  }
  const parts = id.split(CLIENT_ID_SEPERATOR)
  return parts.length == 3
}

const getParamsFromClientId = (
  id: string
): { network: Network; address: string } => {
  const parts = id.split(CLIENT_ID_SEPERATOR)

  const [, networkHint, address] = parts
  if (!isAddressLike(address)) {
    throw new Error(`Invalid ClientId`)
  }

  if (networkHint == 'live') {
    return { network: 'mainnet', address }
  } else if (networkHint == 'test') {
    return { network: 'testnet', address }
  } else if (networkHint == 'dev') {
    return { network: 'dev', address }
  } else {
    throw new Error(`Invalid ClientId`)
  }
}

const HEX_PREFIX = '0x'

const addHexPrefix = (i: string) =>
  i.startsWith(HEX_PREFIX) ? i : HEX_PREFIX + i

const removeHexPrefix = (i: string) =>
  i.startsWith(HEX_PREFIX) ? i.substring(2) : i

const getHexFromNumber = (n: number, prefix = true): string => {
  const h = n.toString(16)
  return prefix ? addHexPrefix(h) : removeHexPrefix(h)
}

const setFallbackImage = (e: Event, theme: Theme): void => {
  const target = e.target as HTMLImageElement
  target.src = fallbackLogo[theme]
}

const getCurrentUrl = () => {
  const url = window.location.origin + window.location.pathname
  return url
}

const getConstructorParams = (initParams?: Partial<ConstructorParams>) => {
  const p: ConstructorParams = {
    network: 'testnet',
    debug: false,
    position: 'right',
    theme: 'dark',
    alwaysVisible: true,
    setWindowProvider: false,
    connectOptions: {
      compact: false,
    },
  }
  if (initParams?.network) {
    p.network = initParams.network
  }
  if (initParams?.debug !== undefined) {
    p.debug = initParams.debug
  }
  if (initParams?.theme) {
    p.theme = initParams.theme
  }
  if (initParams?.position) {
    p.position = initParams.position
  }
  if (initParams?.alwaysVisible !== undefined) {
    p.alwaysVisible = initParams.alwaysVisible
  }
  if (initParams?.connectOptions?.compact !== undefined) {
    p.connectOptions.compact = initParams.connectOptions.compact
  }

  if (p.network == 'testnet' || p.network == 'dev') {
    console.log(
      `%c[XAR_AUTH_SDK] You are currently on ${p.network} network.`,
      'color: red'
    )
  }
  return p
}

const MAX = 4294967295
let idCounter = Math.floor(Math.random() * MAX)
const getUniqueId = () => {
  idCounter = (idCounter + 1) % MAX
  return idCounter
}

function preLoadIframe(url: string, appId: string) {
  try {
    if (typeof document === 'undefined') return
    const iframeLink = document.createElement('link')
    iframeLink.href = `${url}/${appId}/v2/login`
    iframeLink.type = 'text/html'
    iframeLink.rel = 'prefetch'
    document.head.appendChild(iframeLink)
  } catch (error) {
    console.warn(error)
  }
}

/**
 * @source https://github.com/blakeembrey/universal-base64/blob/master/src/browser.ts
 */
function btoaUTF8(str: string): string {
  return window.btoa(
    encodeURIComponent(str).replace(/%[0-9A-F]{2}/g, percentToByte)
  )
}

function percentToByte(p: string) {
  return String.fromCharCode(parseInt(p.slice(1), 16))
}

export function encodeJSON<T>(options: T): string {
  return btoaUTF8(JSON.stringify(options))
}

export function onWindowReady(fn: () => void) {
  if (document.readyState === 'complete') {
    fn()
  } else {
    window.addEventListener('load', fn)
  }
}

export {
  ICONS,
  constructLoginUrl,
  createDomElement,
  setWalletPosition,
  getUniqueId,
  preLoadIframe,
  getErrorReporter,
  validateAppAddress,
  addHexPrefix,
  removeHexPrefix,
  redirectTo,
  setFallbackImage,
  getFallbackImage,
  getHexFromNumber,
  getCurrentUrl,
  getConstructorParams,
  getParamsFromClientId,
  isClientId,
}

/**
 * Decodes a Base64 string. Safe for UTF-8 characters.
 * Original source is from the `universal-base64` NPM package.
 *
 * @source https://github.com/blakeembrey/universal-base64/blob/master/src/browser.ts
 */
function atobUTF8(str: string) {
  return decodeURIComponent(Array.from(atob(str), byteToPercent).join(''))
}

function byteToPercent(b: string) {
  return `%${`00${b.charCodeAt(0).toString(16)}`.slice(-2)}`
}

/**
 * Given a JSON-serializable object, encode as a Base64-URL string.
 */
export function encodeJSONToBase64(options: unknown): string {
  return escape(btoaUTF8(JSON.stringify(options)))
}

/**
 * Given a Base64-URL JSON string, decode a JavaScript object.
 */
export function decodeBase64ToJSON<T>(queryString: string): T {
  return JSON.parse(atobUTF8(unescape(queryString)))
}

function unescape(str: string) {
  return (str + '==='.slice((str.length + 3) % 4))
    .replace(/-/g, '+')
    .replace(/_/g, '/')
}

function escape(str: string) {
  return str.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '')
}
